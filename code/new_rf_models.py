# -*- coding: utf-8 -*-
"""New RF models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d__Ew99m8AJJF7d1kIp4TzaleUsQQEC1

# Getting data
"""

!wget https://www.biorxiv.org/content/biorxiv/early/2021/12/09/2021.12.07.471580/DC2/embed/media-2.zip

!unzip /content/media-2.zip

"""# Importing required libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score

"""Let us look at the data

## LY16
"""

LY16_train = pd.read_csv("/content/Train:Test Sequences/LY16_train_data.csv")
LY16_test = pd.read_csv("/content/Train:Test Sequences/LY16_test_data.csv")

LY16_train.head()

len(LY16_train), len(LY16_test)

LY16 = pd.concat([LY16_test, LY16_train])
LY16.head()

"""## LY555"""

LY555_train = pd.read_csv("/content/Train:Test Sequences/LY555_train_data.csv")
LY555_test = pd.read_csv("/content/Train:Test Sequences/LY555_test_data.csv")

LY555_train.head()

len(LY555_train), len(LY555_test)

LY555 = pd.concat([LY555_test, LY555_train])
LY555.head()

"""## REGN33"""

REGN33_train = pd.read_csv("/content/Train:Test Sequences/REGN33_train_data.csv")
REGN33_test = pd.read_csv("/content/Train:Test Sequences/REGN33_test_data.csv")

REGN33_train.head()

len(REGN33_train), len(REGN33_test)

REGN33 = pd.concat([REGN33_test, REGN33_train])
REGN33.head()

"""## REGN87"""

REGN87_train = pd.read_csv("/content/Train:Test Sequences/REGN87_train_data.csv")
REGN87_test = pd.read_csv("/content/Train:Test Sequences/REGN87_test_data.csv")

REGN87_train.head()

len(REGN87_train), len(REGN87_test)

REGN87 = pd.concat([REGN87_test, REGN87_train])
REGN87.head()

"""# One-hot encoding"""

#list of all aminoacids
aminoacids = np.array([
    ["A"], ["C"], ["D"],
    ["E"], ["F"], ["G"],
    ["H"], ["I"], ["K"],
    ["L"], ["M"], ["N"],
    ["P"], ["Q"], ["R"],
    ["S"], ["T"], ["V"],
    ["W"], ["Y"]])

#encoder
encoder = OneHotEncoder()
encoder = encoder.fit_transform(aminoacids).toarray()

aminoacids_list = []
for i in aminoacids:
    aminoacids_list.append(i[0])

enc = dict(zip(aminoacids_list, encoder))

def encoding_func(dataset):
  encoded_list = []
  for i in range(len(dataset)):
    seq = dataset['junction_aa'].iloc[i]
    seq_encodded = []
    for letter in seq:
      seq_encodded.append(enc[letter])
    seq_encodded = np.array(seq_encodded)
    encoded_list.append(seq_encodded)
  encoded_list = np.array(encoded_list)
  return encoded_list

"""#RF models

## Preprocessing data
"""

def adding_enc_ab(A, B):
    C = np.concatenate((A, np.broadcast_to(np.array(B)[None, None, :], A.shape[:1] + (1,) + A.shape[2:])), axis = 1)
    return C

def preprocessing_data(df, arr):
    sample = df.sample(n=2000)
    train, test = sample[0:1600], sample[1600:]
    train_enc = encoding_func(train)
    test_enc = encoding_func(test)
    train_enc = adding_enc_ab(train_enc, arr)
    test_enc = adding_enc_ab(test_enc, arr)
    train_X = train_enc.reshape(train_enc.shape[0], (train_enc.shape[1]*train_enc.shape[2]))
    test_X = test_enc.reshape(test_enc.shape[0], (test_enc.shape[1]*test_enc.shape[2]))
    train_y = train['Label']
    test_y = test['Label']
    return train_X, test_X, train_y, test_y

"""### LY16"""

arr = np.zeros(20)
arr[0] = 1

LY16_train_X, LY16_test_X, LY16_train_y, LY16_test_y = preprocessing_data(LY16, arr)

"""### LY555"""

arr = np.zeros(20)
arr[1] = 1

LY555_train_X, LY555_test_X, LY555_train_y, LY555_test_y = preprocessing_data(LY555, arr)

"""### REGN33"""

arr = np.zeros(20)
arr[2] = 1

REGN33_train_X, REGN33_test_X, REGN33_train_y, REGN33_test_y = preprocessing_data(REGN33, arr)

"""### REGN87"""

arr = np.zeros(20)
arr[3] = 1

REGN87_train_X, REGN87_test_X, REGN87_train_y, REGN87_test_y = preprocessing_data(REGN87, arr)

"""## RF

"""

def rf(clfRF, train_X, train_y, test_X, test_y):
    clfRF.fit(train_X, train_y)
    y_predicted = clfRF.predict(test_X)
    acc = accuracy_score(test_y, y_predicted)
    pre = precision_score(test_y, y_predicted)
    rec = recall_score(test_y, y_predicted)
    f1 = f1_score(test_y, y_predicted)
    roc_auc = roc_auc_score(test_y, y_predicted)
    print('accuracy_score', acc)
    print('precision_score', pre)
    print('recall_score', rec)
    print('f1_score', f1)
    print('roc_auc_score', roc_auc)
#    return acc, pre, rec, f1, roc_auc

"""### Model 1
train-1: 1600 Ag для Ab-1

test-1: 400 Ag для Ab-1 (different from train-1)
"""

clfRF = RandomForestClassifier(n_estimators=500, max_depth=150, min_samples_split=2, min_samples_leaf=1, max_features='sqrt')

rf(clfRF, LY16_train_X, LY16_train_y, LY16_test_X, LY16_test_y)

"""### Model 2
train-2: 1600 Ag для Ab-2

test-2: 400 Ag для Ab-2
"""

clfRF = RandomForestClassifier(n_estimators=500, max_depth=150, min_samples_split=2, min_samples_leaf=1, max_features='sqrt')

rf(clfRF, LY555_train_X, LY555_train_y, LY555_test_X, LY555_test_y)

"""### Model 3
train-3: 1600 Ag для Ab-3

test-3: 400 Ag для Ab-3

"""

clfRF = RandomForestClassifier(n_estimators=500, max_depth=150, min_samples_split=2, min_samples_leaf=1, max_features='sqrt')

rf(clfRF, REGN33_train_X, REGN33_train_y, REGN33_test_X, REGN33_test_y)

"""### Model 4
train-4: 1600 Ag для Ab-4

test-4: 400 Ag для Ab-4

"""

clfRF = RandomForestClassifier(n_estimators=500, max_depth=150, min_samples_split=2, min_samples_leaf=1, max_features='sqrt')

rf(clfRF, REGN87_train_X, REGN87_train_y, REGN87_test_X, REGN87_test_y)

"""### Model 5
train-1 + train-2 + train-3 + train-4 test-1

train-1 + train-2 + train-3 + train-4 test-2

train-1 + train-2 + train-3 + train-4 test-3

train-1 + train-2 + train-3 + train-4 test-4


"""

#put together all train data
train_X = np.concatenate((LY16_train_X, LY555_train_X, REGN33_train_X, REGN87_train_X), axis=0)
train_y = np.concatenate((LY16_train_y, LY555_train_y, REGN33_train_y, REGN87_train_y), axis=0)

"""#### test 1"""

clfRF = RandomForestClassifier(n_estimators=500, max_depth=150, min_samples_split=2, min_samples_leaf=1, max_features='sqrt')

rf(clfRF, train_X, train_y, LY16_test_X, LY16_test_y)

"""#### test 2"""

clfRF = RandomForestClassifier(n_estimators=500, max_depth=150, min_samples_split=2, min_samples_leaf=1, max_features='sqrt')

rf(clfRF, train_X, train_y, LY555_test_X, LY555_test_y)

"""#### test 3"""

clfRF = RandomForestClassifier(n_estimators=500, max_depth=150, min_samples_split=2, min_samples_leaf=1, max_features='sqrt')

rf(clfRF, train_X, train_y, REGN33_test_X, REGN33_test_y)

"""#### test 4"""

clfRF = RandomForestClassifier(n_estimators=500, max_depth=150, min_samples_split=2, min_samples_leaf=1, max_features='sqrt')

rf(clfRF, train_X, train_y, REGN87_test_X, REGN87_test_y)

"""The statistics and visualization of obtained results were made using Prism 8"""